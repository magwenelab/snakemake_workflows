
import os.path
from pathlib import Path
import pandas as pd

configfile: "config/config.yaml"

SAMPLE_TABLE = pd.read_csv(config["snippy"]["sample_table"]).set_index("sample", drop=False)
SAMPLES = sorted(set(SAMPLE_TABLE["sample"]))

OUTDIR = config["output_directory"]
OUTPATH = Path(OUTDIR) / "snippy"


rule all:
    input:
        expand(OUTPATH / "softlinked/{sample}.fa", sample=SAMPLES),
        expand(OUTPATH / "softlinked/{sample}.bam", sample=SAMPLES),
        expand(OUTPATH / "{sample}/snps.consensus.fa", sample=SAMPLES),
        expand(OUTPATH / "{sample}/snps.bam", sample=SAMPLES),


def input_from_df(wildcards):
    s = SAMPLE_TABLE.loc[wildcards.sample,]
    return {
        "fq1": s["fq1"],
        "fq2": s["fq2"],
        "refgenome": s["refgenome"],
    }


rule snippy:
    input:
        unpack(input_from_df),
    output:
        fasta = OUTPATH / "{sample}/snps.consensus.fa",
        bam = OUTPATH / "{sample}/snps.bam"
    params:
        outpath = OUTPATH,
        extra = config["snippy"]["extra_params"]
    threads: 
        config["snippy"]["threads"]
    conda:
        "envs/snippy.yaml"
    log:
        "logs/snippy/{sample}.log",
    shell:
        "snippy " 
        "--cpus {threads} "
        "--outdir {params.outpath}/{wildcards.sample} "
        "--ref {input.refgenome} "
        "--R1 {input.fq1} "
        "--R2 {input.fq2} "
        "{params.extra} "
        "--force &> {log}"

rule make_links:
    input:  
        fasta = rules.snippy.output.fasta,
        bam = rules.snippy.output.bam  
    output:
        fasta = OUTPATH / "softlinked/{sample}.fa",
        bam = OUTPATH / "softlinked/{sample}.bam",
    shell:
        "ln -s {workflow.workdir_init}/{input.fasta} {output.fasta} "
        " && "
        "ln -s {workflow.workdir_init}/{input.bam} {output.bam} "   
        " && "
        "ln -s {workflow.workdir_init}/{input.bam}.bai {output.bam}.bai " 
